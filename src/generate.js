import { generateSecretKeySeed, decodeSecretKeySeed } from '@digitalcredentials/bnid';
import { driver } from '@digitalcredentials/did-method-key';

export default async function generateSeed() {
    const seed = await generateSecretKeySeed(); 
    const decodedSeed = await decodeSeed(seed)
    const didKeyDriver = driver();
    const { didDocument } = await didKeyDriver.generate({ seed: decodedSeed });
    const did = didDocument.id
    return {seed, did, didDocument}
}

const decodeSeed = async (secretKeySeed) => {
    let secretKeySeedBytes // Uint8Array;
    if (secretKeySeed.startsWith('z')) {
        // This is a multibase-decoded key seed, like those generated by @digitalcredentials/did-cli
        secretKeySeedBytes = decodeSecretKeySeed({ secretKeySeed });
    } else if (secretKeySeed.length >= 32) {
        secretKeySeedBytes = (new TextEncoder()).encode(secretKeySeed).slice(0, 32);
    } else {
        throw TypeError('"secretKeySeed" must be at least 32 bytes, preferably multibase-encoded.');
    }
    return secretKeySeedBytes;
}